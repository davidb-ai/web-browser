name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.0, v2.1.3, etc.
      - 'v*.*.*-*'  # Matches pre-release tags like v1.0.0-beta.1

jobs:
  setup:
    name: Setup Release Environment
    uses: ./.github/workflows/copilot-setup-steps.yml
    with:
      platform: 'auto'
      python-version: '3.12'
      checkout-chromium: true
      chromium-cache-key: 'chromium-release'

  build-release:
    name: Build Release
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        
    outputs:
      macos-artifact: ${{ steps.artifact-info.outputs.macos-artifact }}
      windows-artifact: ${{ steps.artifact-info.outputs.windows-artifact }}

    steps:
      - name: Checkout BrowserOS
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Setup build environment
        shell: bash
        run: |
          echo "${{ needs.setup.outputs.depot-tools-path }}" >> $GITHUB_PATH
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" >> $GITHUB_ENV
          fi

      - name: Import signing certificates (macOS)
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create and configure keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Import certificate
          if [ -n "$MACOS_CERTIFICATE_BASE64" ]; then
            echo "$MACOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
            security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
            rm certificate.p12
          fi
          
          # Set keychain as default
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | tr -d '"')
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      - name: Import signing certificate (Windows)
        if: runner.os == 'Windows' && env.WINDOWS_CERTIFICATE_PFX_BASE64 != ''
        env:
          WINDOWS_CERTIFICATE_PFX_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_PFX_BASE64 }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        shell: pwsh
        run: |
          $certBytes = [Convert]::FromBase64String($env:WINDOWS_CERTIFICATE_PFX_BASE64)
          $certPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "cert.pfx"
          [IO.File]::WriteAllBytes($certPath, $certBytes)
          
          $securePwd = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
          Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePwd
          Remove-Item $certPath

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            out/
            ${{ needs.setup.outputs.chromium-src-path }}/out/
          key: build-artifacts-${{ runner.os }}-release-${{ hashFiles('CHROMIUM_VERSION', 'patches/**/*.patch', 'build/config/*.yaml') }}
          restore-keys: |
            build-artifacts-${{ runner.os }}-release-
            build-artifacts-${{ runner.os }}-

      - name: Apply patches
        shell: bash
        run: |
          python build/build.py \
            --config build/config/release.yaml \
            --chromium-src ${{ needs.setup.outputs.chromium-src-path }} \
            --apply-patches

      - name: Build BrowserOS
        shell: bash
        run: |
          python build/build.py \
            --config build/config/release.yaml \
            --chromium-src ${{ needs.setup.outputs.chromium-src-path }} \
            --build

      - name: Sign application
        shell: bash
        env:
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          WINDOWS_CERTIFICATE_NAME: ${{ secrets.WINDOWS_CERTIFICATE_NAME }}
        run: |
          python build/build.py \
            --config build/config/release.yaml \
            --chromium-src ${{ needs.setup.outputs.chromium-src-path }} \
            --sign

      - name: Notarize application (macOS)
        if: runner.os == 'macOS'
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        shell: bash
        run: |
          # The build script handles notarization as part of the sign step
          echo "Notarization completed during sign step"

      - name: Package installer
        shell: bash
        run: |
          python build/build.py \
            --config build/config/release.yaml \
            --chromium-src ${{ needs.setup.outputs.chromium-src-path }} \
            --package

      - name: Get artifact info
        id: artifact-info
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            DMG_FILE=$(find out -name "*.dmg" -type f | head -1)
            if [ -n "$DMG_FILE" ]; then
              echo "macos-artifact=$(basename $DMG_FILE)" >> $GITHUB_OUTPUT
              echo "artifact-path=$DMG_FILE" >> $GITHUB_OUTPUT
            fi
          else
            MSI_FILE=$(find out -name "*.msi" -type f | head -1)
            if [ -n "$MSI_FILE" ]; then
              echo "windows-artifact=$(basename $MSI_FILE)" >> $GITHUB_OUTPUT
              echo "artifact-path=$MSI_FILE" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: browseros-${{ runner.os }}-${{ github.ref_name }}
          path: ${{ steps.artifact-info.outputs.artifact-path }}
          retention-days: 7

      - name: Generate checksums
        shell: bash
        run: |
          ARTIFACT_PATH="${{ steps.artifact-info.outputs.artifact-path }}"
          if [ -f "$ARTIFACT_PATH" ]; then
            sha256sum "$ARTIFACT_PATH" > "$ARTIFACT_PATH.sha256"
            md5sum "$ARTIFACT_PATH" > "$ARTIFACT_PATH.md5"
          fi

      - name: Upload checksum files
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ runner.os }}-${{ github.ref_name }}
          path: |
            *.sha256
            *.md5
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Generate release notes
        id: release-notes
        shell: bash
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF_NAME#v}
          
          # Generate release notes
          cat > release-notes.md << EOF
          # BrowserOS $VERSION
          
          ## What's New
          
          <!-- Add release highlights here -->
          
          ## Downloads
          
          - **macOS**: BrowserOS-$VERSION.dmg
          - **Windows**: BrowserOS-$VERSION.msi
          
          ## Installation
          
          ### macOS
          1. Download the .dmg file
          2. Open the downloaded file
          3. Drag BrowserOS to your Applications folder
          4. On first launch, right-click and select "Open" to bypass Gatekeeper
          
          ### Windows
          1. Download the .msi file
          2. Run the installer
          3. Follow the installation wizard
          
          ## Checksums
          
          Verify your download with the provided SHA256 checksums:
          \`\`\`
          $(find release-artifacts -name "*.sha256" -exec cat {} \;)
          \`\`\`
          
          ## System Requirements
          
          - **macOS**: 10.15 or later
          - **Windows**: Windows 10 or later
          - **RAM**: 8GB minimum, 16GB recommended
          - **Storage**: 2GB free space
          
          ## Known Issues
          
          <!-- List any known issues here -->
          
          ## Contributors
          
          Thank you to all contributors who made this release possible!
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.ref_name }}
          EOF
          
          # Check if this is a pre-release
          if [[ "$VERSION" == *"-"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: BrowserOS ${{ github.ref_name }}
          body_path: release-notes.md
          draft: true  # Create as draft for manual review
          prerelease: ${{ steps.release-notes.outputs.prerelease }}
          files: |
            release-artifacts/**/*.dmg
            release-artifacts/**/*.msi
            release-artifacts/**/*.sha256
            release-artifacts/**/*.md5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GCS (optional)
        if: env.GCS_SERVICE_ACCOUNT_KEY != ''
        env:
          GCS_SERVICE_ACCOUNT_KEY: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          GCS_PROJECT_ID: ${{ secrets.GCS_PROJECT_ID }}
        run: |
          # Authenticate with GCS
          echo "$GCS_SERVICE_ACCOUNT_KEY" | base64 -d > gcs-key.json
          gcloud auth activate-service-account --key-file=gcs-key.json
          gcloud config set project $GCS_PROJECT_ID
          
          # Upload to GCS
          VERSION=${GITHUB_REF_NAME#v}
          gsutil -m cp release-artifacts/**/*.{dmg,msi,sha256,md5} gs://$GCS_BUCKET_NAME/releases/$VERSION/
          
          # Clean up
          rm gcs-key.json

      - name: Notify Slack (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          VERSION=${GITHUB_REF_NAME}
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 BrowserOS '"$VERSION"' has been released!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 New BrowserOS Release: '"$VERSION"'"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release URL:* https://github.com/'"${{ github.repository }}"'/releases/tag/'"$VERSION"'\n*Status:* Draft (awaiting manual publish)"
                  }
                }
              ]
            }'